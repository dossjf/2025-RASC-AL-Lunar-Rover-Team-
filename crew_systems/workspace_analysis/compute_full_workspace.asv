% --------------------- %
% ---- ENAE484 TEAM --- %
%  Workspace generator  %
% --------------------- %
% --------------------- %
function compute_full_workspace(robot_name, dh_table, dh_type, num_joints, joint_limits, iter_per_joint)
    addpath("./kinematics/")
    
    % RECALL THAT DH TABLES START i=0 IS THE BASE LINK, i.e [0,0,0]
    % units are degrees and meters
    
    % DH table for refernce
    % __|      a(i-1),            alpha(i-1),       d(i),         theta(i)
    % 1 |       a0,                 alpha0,         d1,           theta1 
    % 2 |       a1,                 alpha1,         d2,           theta2;  
    %   |       .                     .             .               .   
    %   |       .                     .             .               .   
    %   |       .                     .             .               .  
    % j |       aj-1,               alphaj-1,       dj,           thetaj;  
    
    fprintf("\n")
    warning("MAKE SURE ALL INPUTS ARE IN RADIANS, and METERS (SI UNITS)")
    fprintf("\n")
    dh_mod = dh_table;
    
    if(dh_type == "mod" || dh_type == "modif" || dh_type == "modified")
        dh_computer = @SslModifDhTableToTransf;
    elseif(dh_type == "standard")
        dh_computer = @SslStandardDhTableToTransf;
    else
        fprintf("\nUnable to figure out DH type, allowed options are:\n\t['mod', 'modif', 'modified'] for modified DH convention\n\t['standard'] for standard DH convention\n")
        error("DH table type error")
    end
    
    
    % Get the recquired vector length so we don't make it too big
    if(length(joint_limits) ~= num_joints)
        error("%s's joint_limits[] array must be length of %d!\n", robot_name, num_joints)
    end
    if(length(joint_limits(1,:)) ~=2)
        fprintf("\nIncorrect input, expected: \n\tjoint_array = [min1,max1; min2, max2; ...; minN, maxN]\n")
        error("%s's joint_limits[] matrix must contain 2-elements per row representing the min and max joint angles!", robot_name)
    end
    if(length(iter_per_joint) ~= num_joints)
        error("%s's iter_per_joint[] array must be length of %d! must contain desired angle increments (in radians) for each joint\n", robot_name, num_joints)
    end
    
    count = 1;
    for i = 1:num_joints
        for th1=joint_limits(i,1):iter_per_joint(i):joint_limits(i,2)
            count = count + 1;
        end
    end
    fprintf("Array length: " + int2str(count) + "\n")
    
    % Pre-allocate the array sizes
    robot_ws.full.cartx = zeros(1,count);
    robot_ws.full.carty = zeros(1,count);
    robot_ws.full.cartz = zeros(1,count);
    robot_ws.full.q = zeros(7,count);
    
    % reset counter
    count = 1; 
    % Begin the long ass iteration (its so over)
    % THIS IS SUCH TRASH CODE LMAOOOO
    if(num_joints == 2)
        for th1=joint_limits(1,1):iter_per_joint(1):joint_limits(1,2)
        fprintf("Started interation, current J1 angle is " )
        th1
            for th2=joint_limits(2,1):iter_per_joint(2):joint_limits(2,2)
                for th3=joint_limits(3,1):iter_per_joint(3):joint_limits(3,2)
                    for th4=joint_limits(4,1):iter_per_joint(4):joint_limits(4,2)
                        for th5=joint_limits(5,1):iter_per_joint(5):joint_limits(5,2)
                            for th6=joint_limits(6,1):iter_per_joint(6):joint_limits(6,2)
                                for th7=joint_limits(7,1):iter_per_joint(7):joint_limits(7,2)
                                    % Iterate the joint positions (theta values)
                                    dh_mod(1,4) = th1;
                                    dh_mod(2,4) = th2;
                                    dh_mod(3,4) = th3;
                                    dh_mod(4,4) = th4;
                                    dh_mod(5,4) = th5;
                                    dh_mod(6,4) = th6;
                                    dh_mod(7,4) = th7;
        
            
                                    % Compute the final output pose
                                    T_final = SslModifDhTableToTransf(0, 8, dh_mod);
                                    robot_ws.full.cartx(count) = T_final(1,4); % Save the value in the x vector
                                    robot_ws.full.carty(count) = T_final(2,4); % Save the value in the y vector
                                    robot_ws.full.cartz(count) = T_final(3,4); % Save the value in the z vector
                                    % Save the joint state that we are currently at
                                    robot_ws.full.q(1,count) = dymaDH(1,4) + th1;
                                    robot_ws.full.q(2,count) = dymaDH(2,4) + th2;
                                    robot_ws.full.q(3,count) = dymaDH(3,4) + th3;
                                    robot_ws.full.q(4,count) = dymaDH(4,4) + th4;
                                    robot_ws.full.q(5,count) = dymaDH(5,4) + th5;
                                    robot_ws.full.q(6,count) = dymaDH(6,4) + th6;
                                    robot_ws.full.q(7,count) = dymaDH(7,4) + th7;
                                    count = count + 1; % iterate up
                                end
                            end
                        end
                    end
                end
            end
        end
        
    end
    
    
    
    dyma_mat = [robot_ws.full.cartx(:), robot_ws.full.carty(:), robot_ws.full.cartz(:)];
    cart = unique(dyma_mat, "rows", "stable");
    robot_ws.full_unique.cartx(:) = cart(:,1);
    robot_ws.full_unique.carty(:) = cart(:,2);
    robot_ws.full_unique.cartz(:) = cart(:,3);
    
    % Now save the vector outputs
    file_name = "data/robot_ws";
    save(file_name, "robot_ws", "-v7.3");
    
    
    clear cart dyma_mat dh_mod th1 th2 th3 th4 th5 th6 th7 data_length iter_per_joint T_final count file_name i 
end